namespace Berf.Controllers

open System
open System.Collections.Generic
open System.Linq
open System.Web
open System.Web.Mvc
open System.Web.Mvc.Ajax
open System.Data
open System.Data.Linq
open System.Text.RegularExpressions
open Microsoft.FSharp.Data.TypeProviders
open Microsoft.FSharp.Linq
open System
open System.Configuration
open System.Diagnostics
open System.Web
open System.Web.Mvc
open System.Reflection

//type dbSchema = SqlDataConnection< "data source=.\SQLSERVER2012;Initial Catalog=Berf;Integrated Security=SSPI;" >
//type internal EntityConnection = SqlEntityConnection< "data source=.\SQLSERVER2012;Initial Catalog=Berf;Integrated Security=SSPI;" >

type BerfController() =
    inherit Controller()

    // helper
    let nullable value = new System.Nullable<_>(value)

    let createClient (berfPacket : Packet) (httpContext : HttpContext) : EntityConnection.ServiceTypes.Client =
<<<<<<< Updated upstream
        let cookie = HttpContext.Current.Request.Cookies.["berf"];
        let berfSessionID = if cookie = null then Guid.Empty else Guid.Parse cookie.Value
=======
        
        let cookie = HttpContext.Current.Request.Cookies.["berf"].Values.[httpContext.Request.UrlReferrer.ToString()];
        let berfSessionID = Guid.Parse cookie
>>>>>>> Stashed changes
        
        let berfTimer = new EntityConnection.ServiceTypes.Client(
                ClientID = Guid.NewGuid(),
                Created = DateTime.UtcNow,

                // Server side things from now
                HostMachineName = httpContext.Server.MachineName, 
                ClientIPAddress = httpContext.Request.UserHostAddress, 
                UserName = httpContext.User.Identity.Name,
                UserAgent = httpContext.Request.UserAgent,
                Source = berfPacket.source,
                BerfSessionID = berfSessionID,
                Url = berfPacket.url,
                Browser = httpContext.Request.Browser.Browser,
                BrowserVersion = httpContext.Request.Browser.Version,

                // Client side
                connectStart = nullable berfPacket.connectStart,
                connectEnd = nullable berfPacket.connectEnd,
                domainLookupStart = nullable berfPacket.domainLookupStart,
                domainLookupEnd = nullable berfPacket.domainLookupEnd,
                duration = nullable berfPacket.duration,
                entryType = berfPacket.entryType,
                fetchStart = nullable berfPacket.fetchStart,
                initiatorType = berfPacket.initiatorType,
                name = berfPacket.name,
                navigationStart = nullable berfPacket.navigationStart, // API 1
                redirectStart = nullable berfPacket.redirectStart,
                redirectEnd = nullable berfPacket.redirectEnd,
                requestStart = nullable berfPacket.requestStart,
                responseStart = nullable berfPacket.responseEnd,
                responseEnd = nullable berfPacket.responseEnd,
                redirectCount = nullable berfPacket.redirectCount,
                secureConnectionStart =nullable  berfPacket.secureConnectionStart,
                startTime = nullable berfPacket.startTime,
                unloadEventStart = nullable berfPacket.unloadEventStart,
                unloadEventEnd = nullable berfPacket.unloadEventEnd,
                domLoading = nullable berfPacket.domLoading,
                domInteractive = nullable berfPacket.domInteractive,
                domContentLoadedEventStart = nullable berfPacket.domContentLoadedEventStart,
                domContentLoadedEventEnd = nullable berfPacket.domContentLoadedEventEnd,
                domComplete = nullable berfPacket.domComplete,
                loadEventStart = nullable berfPacket.loadEventStart,
                loadEventEnd = nullable berfPacket.loadEventEnd)
        berfTimer

    member this.Index (model : Packet[]) =
        let cnString = Configuration.WebConfigurationManager.ConnectionStrings.["Berf"].ConnectionString
<<<<<<< Updated upstream
        let other = getOther this.HttpContext
=======
>>>>>>> Stashed changes
        let context = EntityConnection.GetDataContext(cnString)
        let fullContext = context.DataContext
        let metrics = model |> Seq.map (fun m -> createClient m HttpContext.Current)

        
        let log = Configuration.WebConfigurationManager.AppSettings.["Berf.Log"]
        let regex = Regex (if log = null then ".*" else log)


        for metric in metrics do
            if regex.Match((if metric.name = null then metric.Url else metric.name)).Success then context.Client.AddObject metric
        
        fullContext.SaveChanges()

//        let cookie = HttpContext.Current.Response.Cookies.["berf"]
//        cookie.Values.[HttpContext.Current.Request.UrlReferrer.ToString()] <- String.Empty
//        HttpContext.Current.Response.Cookies.Add(cookie)
        ()